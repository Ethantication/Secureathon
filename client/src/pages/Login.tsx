import React, { useState } from "react"; import { useNavigate, Link } from "react-router-dom"; import { useAuth } from "../contexts/AuthContext"; import { CheckCircle, AlertCircle, Eye, EyeOff } from "lucide-react"; const Login: React.FC = () => { const navigate = useNavigate(); const { login } = useAuth(); const [formData, setFormData] = useState({ email: "", password: "" }); const [showPassword, setShowPassword] = useState(false); const [isSubmitting, setIsSubmitting] = useState(false); const [message, setMessage] = useState<{ type: "success" | "error"; text: string } | null>(null); const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => { setFormData({ ...formData, [e.target.name]: e.target.value }); }; const handleSubmit = async (e: React.FormEvent) => { e.preventDefault(); setIsSubmitting(true); setMessage(null); try { await login(formData.email, formData.password); setMessage({ type: "success", text: "Login successful! Redirecting..." }); setTimeout(() => navigate("/"), 1500); } catch (error) { setMessage({ type: "error", text: error instanceof Error ? error.message : "Login failed. Please try again." }); } finally { setIsSubmitting(false); } }; return ( <div className="min-h-screen flex items-center justify-center px-4 py-16"> <div className="max-w-md w-full"> <div className="bg-secondary/50 backdrop-blur-sm p-8 rounded-2xl border border-gray-700 shadow-2xl"> <div className="text-center mb-8"> <h2 className="text-3xl font-bold text-white mb-2">Welcome Back</h2> <p className="text-gray-400">Sign in to your account</p> </div> {message && ( <div className={`mb-6 p-4 rounded-lg flex items-center space-x-3 ${ message.type === "success" ? "bg-green-500/20 border border-green-500/50 text-green-300" : "bg-red-500/20 border border-red-500/50 text-red-300" } `} > {message.type === "success" ? <CheckCircle className="h-5 w-5" /> : <AlertCircle className="h-5 w-5" />} <span>{message.text}</span> </div> )} <form onSubmit={handleSubmit} className="space-y-6"> <div> <label htmlFor="email" className="block text-gray-300 font-medium mb-2"> Email </label> <input type="email" id="email" name="email" required value={formData.email} onChange={handleChange} className="w-full p-4 rounded-lg bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200" placeholder="Enter your email" /> </div> <div> <label htmlFor="password" className="block text-gray-300 font-medium mb-2"> Password </label> <div className="relative"> <input type={showPassword ? "text" : "password"} id="password" name="password" required value={formData.password} onChange={handleChange} className="w-full p-4 pr-12 rounded-lg bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200" placeholder="Enter your password" /> <button type="button" onClick={() => setShowPassword(!showPassword)} className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors" > {showPassword ? <EyeOff className="h-5 w-5" /> : <Eye className="h-5 w-5" />} </button> </div> </div> <button type="submit" disabled={isSubmitting} className="w-full py-4 bg-primary text-white font-semibold rounded-lg hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:scale-105 shadow-lg" > {isSubmitting ? "Signing In..." : "Sign In"} </button> </form> <div className="mt-6 text-center"> <p className="text-gray-400"> Don't have an account?{" "} <Link to="/register" className="text-primary hover:underline font-medium"> Sign up </Link> </p> </div> </div> </div> </div> ); }; export default Login;
