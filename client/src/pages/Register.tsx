import React, { useState } from "react"; import { useNavigate } from "react-router-dom"; import { CheckCircle, AlertCircle } from "lucide-react"; const Register: React.FC = () => { const navigate = useNavigate(); const [formData, setFormData] = useState({ fullName: "", email: "", university: "", program: "", cyberBackground: "", friends: "" }); const [isSubmitting, setIsSubmitting] = useState(false); const [message, setMessage] = useState<{ type: "success" | "error"; text: string } | null>(null); const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => { setFormData({ ...formData, [e.target.name]: e.target.value }); }; const handleSubmit = async (e: React.FormEvent) => { e.preventDefault(); setIsSubmitting(true); setMessage(null); try { const response = await fetch("http://localhost:5000/api/registrations", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(formData) }); const data = await response.json(); if (response.ok) { setMessage({ type: "success", text: "Registration successful! We will be in touch soon." }); setFormData({ fullName: "", email: "", university: "", program: "", cyberBackground: "", friends: "" }); setTimeout(() => navigate("/"), 3000); } else { setMessage({ type: "error", text: data.error || "Registration failed. Please try again." }); } } catch (error) { setMessage({ type: "error", text: "Network error. Please check your connection and try again." }); } finally { setIsSubmitting(false); } }; return ( <div className="min-h-screen flex items-center justify-center px-4 py-16"> <div className="max-w-2xl w-full"> <div className="bg-secondary/50 backdrop-blur-sm p-8 rounded-2xl border border-gray-700 shadow-2xl"> <h2 className="text-4xl font-bold text-white mb-8 text-center">Register for Secure-a-thon</h2> {message && ( <div className={`mb-6 p-4 rounded-lg flex items-center space-x-3 ${ message.type === "success" ? "bg-green-500/20 border border-green-500/50 text-green-300" : "bg-red-500/20 border border-red-500/50 text-red-300" } `} > {message.type === "success" ? <CheckCircle className="h-5 w-5" /> : <AlertCircle className="h-5 w-5" />} <span>{message.text}</span> </div> )} <form onSubmit={handleSubmit} className="space-y-6"> <div> <label htmlFor="fullName" className="block text-gray-300 font-medium mb-2"> Full Name * </label> <input type="text" id="fullName" name="fullName" required value={formData.fullName} onChange={handleChange} className="w-full p-4 rounded-lg bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200" placeholder="Enter your full name" /> </div> <div> <label htmlFor="email" className="block text-gray-300 font-medium mb-2"> Email * </label> <input type="email" id="email" name="email" required value={formData.email} onChange={handleChange} className="w-full p-4 rounded-lg bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200" placeholder="Enter your email address" /> </div> <div> <label htmlFor="university" className="block text-gray-300 font-medium mb-2"> University * </label> <input type="text" id="university" name="university" required value={formData.university} onChange={handleChange} className="w-full p-4 rounded-lg bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200" placeholder="Enter your university name" /> </div> <div> <label htmlFor="program" className="block text-gray-300 font-medium mb-2"> Study Program * </label> <input type="text" id="program" name="program" required value={formData.program} onChange={handleChange} className="w-full p-4 rounded-lg bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200" placeholder="Enter your study program" /> </div> <div> <label htmlFor="cyberBackground" className="block text-gray-300 font-medium mb-2"> What is your background in Cyber? * </label> <textarea id="cyberBackground" name="cyberBackground" rows={4} required value={formData.cyberBackground} onChange={handleChange} className="w-full p-4 rounded-lg bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200 resize-none" placeholder="Tell us about your cybersecurity experience, courses, or interests..." /> </div> <div> <label htmlFor="friends" className="block text-gray-300 font-medium mb-2"> List friends who are also registering (optional) </label> <textarea id="friends" name="friends" rows={2} value={formData.friends} onChange={handleChange} className="w-full p-4 rounded-lg bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200 resize-none" placeholder="Names of friends who are also participating..." /> </div> <button type="submit" disabled={isSubmitting} className="w-full py-4 bg-primary text-white font-semibold rounded-lg hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:scale-105 shadow-lg" > {isSubmitting ? "Submitting..." : "Submit Registration"} </button> </form> </div> </div> </div> ); }; export default Register;
