import React, { useState, useEffect } from "react"; import { useAuth } from "../contexts/AuthContext"; import { useNavigate } from "react-router-dom"; import { Users, Mail, Building, GraduationCap, Shield, User, Trash2, Eye } from "lucide-react"; interface Registration { _id: string; fullName: string; email: string; university: string; program: string; cyberBackground: string; friends?: string; timestamp: string; userId: string; } const Registrations: React.FC = () => { const { user } = useAuth(); const navigate = useNavigate(); const [registrations, setRegistrations] = useState<Registration[]>([]); const [isLoading, setIsLoading] = useState(true); const [error, setError] = useState<string | null>(null); const [selectedRegistration, setSelectedRegistration] = useState<Registration | null>(null); useEffect(() => { if (!user || user.role !== "admin") { navigate("/"); return; } fetchRegistrations(); }, [user, navigate]); const fetchRegistrations = async () => { try { const response = await fetch("http://localhost:5000/api/admin/registrations", { headers: { Authorization: `Bearer ${localStorage.getItem("token")}` } }); if (response.ok) { const data = await response.json(); setRegistrations(data); } else { setError("Failed to fetch registrations"); } } catch (error) { setError("Network error"); } finally { setIsLoading(false); } }; const handleDelete = async (id: string) => { if (!confirm("Are you sure you want to delete this registration?")) return; try { const response = await fetch(`http://localhost:5000/api/admin/registrations/${id}`, { method: "DELETE", headers: { Authorization: `Bearer ${localStorage.getItem("token")}` } }); if (response.ok) { setRegistrations(registrations.filter(r => r._id !== id)); } else { setError("Failed to delete registration"); } } catch (error) { setError("Network error"); } }; if (!user || user.role !== "admin") { return null; } if (isLoading) { return ( <div className="min-h-screen flex items-center justify-center"> <div className="text-center"> <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div> <p className="text-gray-400">Loading registrations...</p> </div> </div> ); } if (error) { return ( <div className="min-h-screen flex items-center justify-center"> <div className="text-center"> <p className="text-red-400 mb-4">{error}</p> <button onClick={fetchRegistrations} className="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90"> Retry </button> </div> </div> ); } return ( <div className="min-h-screen py-16 px-4"> <div className="max-w-6xl mx-auto"> <div className="flex items-center justify-between mb-8"> <h1 className="text-4xl font-bold text-white">Current Registrations</h1> <div className="text-gray-400">Total: {registrations.length}</div> </div> {registrations.length === 0 ? ( <div className="text-center py-16"> <Users className="h-24 w-24 text-gray-600 mx-auto mb-4" /> <p className="text-2xl text-gray-400 mb-2">No registrations yet</p> <p className="text-gray-500">Registrations will appear here once students start signing up.</p> </div> ) : ( <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6"> {registrations.map((registration) => ( <div key={registration._id} className="bg-secondary/50 backdrop-blur-sm p-6 rounded-xl border border-gray-700 hover:border-primary/50 transition-all duration-300"> <div className="flex items-start justify-between mb-4"> <div className="flex items-center space-x-3"> <div className="w-10 h-10 bg-primary/20 rounded-full flex items-center justify-center"> <User className="h-5 w-5 text-primary" /> </div> <div> <h3 className="font-bold text-white">{registration.fullName}</h3> <p className="text-sm text-gray-400">{registration.email}</p> </div> </div> <div className="flex space-x-2"> <button onClick={() => setSelectedRegistration(registration)} className="p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-lg transition-colors" title="View Details"> <Eye className="h-4 w-4" /> </button> <button onClick={() => handleDelete(registration._id)} className="p-2 text-red-400 hover:text-white hover:bg-red-600 rounded-lg transition-colors" title="Delete"> <Trash2 className="h-4 w-4" /> </button> </div> </div> <div className="space-y-3"> <div className="flex items-center space-x-3"> <Building className="h-4 w-4 text-gray-400" /> <span className="text-gray-300 text-sm">{registration.university}</span> </div> <div className="flex items-center space-x-3"> <GraduationCap className="h-4 w-4 text-gray-400" /> <span className="text-gray-300 text-sm">{registration.program}</span> </div> <div className="flex items-center space-x-3"> <Shield className="h-4 w-4 text-gray-400" /> <span className="text-gray-300 text-sm">Cyber Background</span> </div> </div> <div className="mt-4 pt-4 border-t border-gray-600"> <p className="text-xs text-gray-500"> Registered: {new Date(registration.timestamp).toLocaleDateString()} </p> </div> </div> ))} </div> )} </div> {selectedRegistration && ( <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50"> <div className="bg-secondary p-8 rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto"> <div className="flex items-center justify-between mb-6"> <h2 className="text-2xl font-bold text-white">Registration Details</h2> <button onClick={() => setSelectedRegistration(null)} className="text-gray-400 hover:text-white text-2xl">Ã—</button> </div> <div className="space-y-4"> <div> <label className="block text-gray-300 font-medium mb-1">Full Name</label> <p className="text-white">{selectedRegistration.fullName}</p> </div> <div> <label className="block text-gray-300 font-medium mb-1">Email</label> <p className="text-white">{selectedRegistration.email}</p> </div> <div> <label className="block text-gray-300 font-medium mb-1">University</label> <p className="text-white">{selectedRegistration.university}</p> </div> <div> <label className="block text-gray-300 font-medium mb-1">Program</label> <p className="text-white">{selectedRegistration.program}</p> </div> <div> <label className="block text-gray-300 font-medium mb-1">Cyber Background</label> <p className="text-white">{selectedRegistration.cyberBackground}</p> </div> {selectedRegistration.friends && ( <div> <label className="block text-gray-300 font-medium mb-1">Friends</label> <p className="text-white">{selectedRegistration.friends}</p> </div> )} <div> <label className="block text-gray-300 font-medium mb-1">Registration Date</label> <p className="text-white">{new Date(selectedRegistration.timestamp).toLocaleString()}</p> </div> <div> <label className="block text-gray-300 font-medium mb-1">User ID</label> <p className="text-white font-mono text-sm">{selectedRegistration.userId}</p> </div> </div> </div> </div> )} </div> </div> ); }; export default Registrations;
