import React from "react"; import { Link, useLocation } from "react-router-dom"; import { useAuth } from "../contexts/AuthContext"; import { Menu, X, User, LogOut } from "lucide-react"; const Header: React.FC = () => { const [isMenuOpen, setIsMenuOpen] = React.useState(false); const { user, logout } = useAuth(); const location = useLocation(); const isActive = (path: string) => location.pathname === path; const navItems = [ { path: "/", label: "Home" }, { path: "/about", label: "About" }, { path: "/teams", label: "Teams" }, { path: "/our-team", label: "Our Team" } ]; const handleLogout = () => { logout(); setIsMenuOpen(false); }; return ( <header className="bg-secondary/80 backdrop-blur-sm border-b border-gray-700 sticky top-0 z-50"> <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"> <div className="flex justify-between items-center h-16"> <div className="flex items-center"> <Link to="/" className="flex items-center space-x-2"> <div className="w-10 h-10 bg-primary rounded-lg flex items-center justify-center"> <span className="text-white font-bold text-lg">S</span> </div> <span className="text-white font-bold text-xl">Secure-a-thon</span> </Link> </div> <nav className="hidden md:flex items-center space-x-4"> {navItems.map((item) => ( <Link key={item.path} to={item.path} className={`px-4 py-2 rounded-lg font-medium transition-colors ${ isActive(item.path) ? "bg-primary text-white" : "text-gray-300 hover:text-white hover:bg-gray-700" } `} > {item.label} </Link> ))} {user?.role === "admin" && ( <Link to="/registrations" className={`px-4 py-2 rounded-lg font-medium transition-colors ${ isActive("/registrations") ? "bg-primary text-white" : "text-gray-300 hover:text-white hover:bg-gray-700" } `} > Registrations </Link> )} </nav> <div className="flex items-center space-x-4"> {user ? ( <div className="flex items-center space-x-2"> <span className="text-gray-300 text-sm">{user.fullName}</span> <button onClick={handleLogout} className="p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-lg transition-colors"> <LogOut size={20} /> </button> </div> ) : ( <div className="flex items-center space-x-2"> <Link to="/login" className="px-4 py-2 text-gray-300 hover:text-white hover:bg-gray-700 rounded-lg transition-colors"> Login </Link> <Link to="/register" className="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors"> Sign Up </Link> </div> )} <button className="md:hidden p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-lg transition-colors" onClick={() => setIsMenuOpen(!isMenuOpen)} > {isMenuOpen ? <X size={24} /> : <Menu size={24} />} </button> </div> </div> {isMenuOpen && ( <div className="md:hidden bg-secondary border-t border-gray-700"> <div className="px-2 pt-2 pb-3 space-y-1"> {navItems.map((item) => ( <Link key={item.path} to={item.path} className={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${ isActive(item.path) ? "bg-primary text-white" : "text-gray-300 hover:text-white hover:bg-gray-700" } `} onClick={() => setIsMenuOpen(false)} > {item.label} </Link> ))} {user?.role === "admin" && ( <Link to="/registrations" className={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${ isActive("/registrations") ? "bg-primary text-white" : "text-gray-300 hover:text-white hover:bg-gray-700" } `} onClick={() => setIsMenuOpen(false)} > Registrations </Link> )} {user ? ( <div className="border-t border-gray-700 pt-4 mt-4"> <div className="px-3 py-2 text-gray-300 text-sm">{user.fullName}</div> <button onClick={handleLogout} className="w-full text-left px-3 py-2 text-gray-300 hover:text-white hover:bg-gray-700 rounded-md transition-colors"> Logout </button> </div> ) : ( <div className="border-t border-gray-700 pt-4 mt-4"> <Link to="/login" className="block px-3 py-2 text-gray-300 hover:text-white hover:bg-gray-700 rounded-md transition-colors"> Login </Link> <Link to="/register" className="block px-3 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors"> Sign Up </Link> </div> )} </div> </div> </div> </header> ); }; export default Header;
