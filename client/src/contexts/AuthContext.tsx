import React, { createContext, useContext, useState, useEffect, ReactNode } from "react"; interface User { id: string; email: string; fullName: string; role: string; } interface AuthContextType { user: User | null; login: (email: string, password: string) => Promise<void>; register: (email: string, password: string, fullName: string) => Promise<void>; logout: () => void; isLoading: boolean; } const AuthContext = createContext<AuthContextType | undefined>(undefined); export const useAuth = () => { const context = useContext(AuthContext); if (context === undefined) { throw new Error("useAuth must be used within an AuthProvider"); } return context; }; interface AuthProviderProps { children: ReactNode; } export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => { const [user, setUser] = useState<User | null>(null); const [isLoading, setIsLoading] = useState(true); useEffect(() => { const token = localStorage.getItem("token"); if (token) { // Verify token and set user // For now, just clear invalid token localStorage.removeItem("token"); } setIsLoading(false); }, []); const login = async (email: string, password: string) => { try { const response = await fetch("http://localhost:5000/api/auth/login", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ email, password }) }); const data = await response.json(); if (!response.ok) { throw new Error(data.error || "Login failed"); } localStorage.setItem("token", data.token); setUser(data.user); } catch (error) { throw error; } }; const register = async (email: string, password: string, fullName: string) => { try { const response = await fetch("http://localhost:5000/api/auth/register", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ email, password, fullName }) }); const data = await response.json(); if (!response.ok) { throw new Error(data.error || "Registration failed"); } localStorage.setItem("token", data.token); setUser(data.user); } catch (error) { throw error; } }; const logout = () => { localStorage.removeItem("token"); setUser(null); }; const value = { user, login, register, logout, isLoading }; return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>; };
