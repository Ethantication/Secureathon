const express = require("express"); const bcrypt = require("bcryptjs"); const jwt = require("jsonwebtoken"); const { body, validationResult } = require("express-validator"); const User = require("../models/User"); const router = express.Router(); router.post("/register", [ body("email").isEmail().normalizeEmail(), body("password").isLength({ min: 6 }), body("fullName").trim().notEmpty() ], async (req, res) => { try { const errors = validationResult(req); if (!errors.isEmpty()) { return res.status(400).json({ errors: errors.array() }); } const { email, password, fullName } = req.body; const existingUser = await User.findOne({ email }); if (existingUser) { return res.status(400).json({ error: "User already exists" }); } const hashedPassword = await bcrypt.hash(password, 12); const user = new User({ email, password: hashedPassword, fullName }); await user.save(); const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET || "your-secret-key", { expiresIn: "7d" }); res.status(201).json({ token, user: { id: user._id, email: user.email, fullName: user.fullName, role: user.role } }); } catch (error) { console.error("Registration error:", error); res.status(500).json({ error: "Server error" }); } }); router.post("/login", [ body("email").isEmail().normalizeEmail(), body("password").notEmpty() ], async (req, res) => { try { const errors = validationResult(req); if (!errors.isEmpty()) { return res.status(400).json({ errors: errors.array() }); } const { email, password } = req.body; const user = await User.findOne({ email }); if (!user) { return res.status(400).json({ error: "Invalid credentials" }); } const isPasswordValid = await bcrypt.compare(password, user.password); if (!isPasswordValid) { return res.status(400).json({ error: "Invalid credentials" }); } const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET || "your-secret-key", { expiresIn: "7d" }); res.json({ token, user: { id: user._id, email: user.email, fullName: user.fullName, role: user.role } }); } catch (error) { console.error("Login error:", error); res.status(500).json({ error: "Server error" }); } }); module.exports = router;
