const express = require("express"); const mongoose = require("mongoose"); const cors = require("cors"); const helmet = require("helmet"); const rateLimit = require("express-rate-limit"); require("dotenv").config(); const authRoutes = require("./routes/auth"); const registrationRoutes = require("./routes/registrations"); const adminRoutes = require("./routes/admin"); const app = express(); const PORT = process.env.PORT || 5000; app.use(helmet()); app.use(cors({ origin: process.env.CLIENT_URL || "http://localhost:3000", credentials: true })); const limiter = rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }); app.use(limiter); app.use(express.json({ limit: "10mb" })); app.use(express.urlencoded({ extended: true, limit: "10mb" })); mongoose.connect(process.env.MONGODB_URI || "mongodb://localhost:27017/secure-a-thon", { useNewUrlParser: true, useUnifiedTopology: true, }).then(() => console.log("Connected to MongoDB")).catch(err => console.error("MongoDB connection error:", err)); app.use("/api/auth", authRoutes); app.use("/api/registrations", registrationRoutes); app.use("/api/admin", adminRoutes); app.get("/api/health", (req, res) => { res.json({ status: "OK", timestamp: new Date().toISOString() }); }); app.use((err, req, res, next) => { console.error(err.stack); res.status(500).json({ error: "Something went wrong!", message: process.env.NODE_ENV === "development" ? err.message : "Internal server error" }); }); app.use("*", (req, res) => { res.status(404).json({ error: "Route not found" }); }); app.listen(PORT, () => { console.log(`Server running on port ${PORT}`); });
